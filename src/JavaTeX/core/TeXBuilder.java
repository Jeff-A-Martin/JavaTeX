package JavaTeX.core;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * This class is used to build (compile) TeX Source.
 */
public class TeXBuilder {

    public static final String DEFAULT_OUTPUT_FILE_NAME = "output";

    private boolean log; /* Should the JavaTeX.core.TeXBuilder keep the log file generated by TeX? */
    private boolean dvi; /* Should the JavaTeX.core.TeXBuilder keep the dvi file generated by TeX? */
    private boolean pdf; /* Should the JavaTeX.core.TeXBuilder generate a pdf file? */
    private String outputFileName; /* The name of the file generated by TeX (Excluding file extensions) */
    private Path outputFilePath; /* The path to the file generated by TeX (Excluding the file itself) */

    /**
     * Default Constructor
     * Creates a JavaTeX.core.TeXBuilder that generates a pdf file titled "out.pdf" in the JRE working directory
     */
    public TeXBuilder(){
        this.log = false;
        this.dvi = false;
        this.pdf = true;
        this.outputFileName = DEFAULT_OUTPUT_FILE_NAME;
        this.outputFilePath = getDefaultOutputFilePath();
    }

    /**
     * Customized Constructor
     * @param log Should the JavaTeX.core.TeXBuilder keep the log file generated by TeX?
     * @param dvi Should the JavaTeX.core.TeXBuilder keep the dvi file generated by TeX?
     * @param pdf Should the JavaTeX.core.TeXBuilder generate and a pdf file?
     * @param outputFileName The name of the file generated by TeX (Excluding file extensions).
     * @param outputFilePath The path to the file generated by TeX (Excluding the file itself).
     */
    public TeXBuilder(boolean log, boolean dvi, boolean pdf, String outputFileName, String outputFilePath){
        this.log = log;
        this.dvi = dvi;
        this.pdf = pdf;
        /* Check that the given outputFileName and outputFilePath are valid. Assign default values if invalid */
        this.outputFileName = validFileName(outputFileName) ? outputFileName : DEFAULT_OUTPUT_FILE_NAME;
        this.outputFilePath = validPath(outputFilePath) ? Paths.get(outputFilePath) : getDefaultOutputFilePath();
    }

    /**
     * @return A Path object representing the default file path of the JRE.
     */
    private Path getDefaultOutputFilePath(){
        return Paths.get("");
    }

    /**
     * This function determines if the given path is a valid file path on this system.
     * @param path The path to be checked.
     * @return A boolean indicating whether the name is a valid file name.
     */
    private boolean validPath(String path){
        return validFileName(path) && new File(path).isDirectory();
    }


    /**
     * This function determines if the given name represents a valid file name on the system (i.e., is composed of valid
     * characters). If a Path object can be instantiated than the name is valid.
     * @param name The file name to be checked.
     * @return A boolean indicating whether the given name is a valid file name on the system.
     */
    private boolean validFileName(String name){
        if(name == null) return false;
        return Paths.get(name) != null;
    }

    /**
     * This function returns the full file path using this TeXBuilder's path, filename, and the given extension.
     * @param extension The extension of the file.
     * @return A string representing the full file name.
     */
    private String getFullFilePath(String extension){
        if(!validFileName(extension)) extension = "";
        if(this.outputFilePath.toString().equals("")) {
            return this.outputFileName + extension;
        }else {
            return this.outputFilePath.toString() + "/" + this.outputFileName + extension;
        }
    }

    /**
     * This function converts the existing DVI output file generated by TeX to a PDF output file.
     * @return A boolean indicating whether the conversion was successful.
     */
    private boolean convertToPDF(){
        String[] cmds = {"dvipdfm", "-o", getFullFilePath(".pdf"), getFullFilePath(".dvi")};
        try {
            Process DVIPDFM = Runtime.getRuntime().exec(cmds);
            int exitVal = DVIPDFM.waitFor();
            return exitVal == 0;
        }catch(Exception e){
            return false;
        }
    }

    /**
     * This function deletes the existing DVI output file generated by TeX.
     * @return A boolean indicting whether the deletion was successful.
     */
    private boolean deleteDVIFile(){
        String[] cmds = {"rm", getFullFilePath(".dvi")};
        try {
            Process RM = Runtime.getRuntime().exec(cmds);
            int exitVal = RM.waitFor();
            return exitVal == 0;
        }catch(Exception e){
            return false;
        }
    }

    /**
     * This function deletes the existing log file generated by TeX.
     * @return A boolean indicting whether the deletion was successful.
     */
    private boolean deleteLogFile(){
        String[] cmds = {"rm", getFullFilePath(".log")};
        try {
            Process RM = Runtime.getRuntime().exec(cmds);
            int exitVal = RM.waitFor();
            return exitVal == 0;
        }catch(Exception e){
            return false;
        }
    }

    /**
     * This function builds the given JavaTeX.core.TeXString.
     * @param source The JavaTeX.core.TeXString to be built.
     * @return A boolean indicating whether the given JavaTeX.core.TeXString was built successfully.
     */
    public boolean build(TeXString source) {
        if(source == null || source.getSource() == null) return false;
        String[] cmds = {"tex", "-jobname=" + getFullFilePath(null), "-interaction=scrollmode", "\\relax", source.getSource(), "\\end"};
        boolean result = true;
        try {
            Process TeXProc = Runtime.getRuntime().exec(cmds);
            int exitVal = TeXProc.waitFor();
            if(exitVal != 0) result = false;
        }catch(Exception e){
            result = false;
        }

        if(pdf) if(!convertToPDF()) result = false;
        if(!log) if(!deleteLogFile()) result = false;
        if(!dvi) if(!deleteDVIFile()) result = false;

        return result;
    }

    /**
     * This function builds the given JavaTeX.core.TeXFile.
     * @param source the JavaTeX.core.TeXFile to be built.
     * @return A boolean indicating Whether the given JavaTeX.core.TeXFile was built successfully.
     */
    public boolean build(TeXFile source){
        if(source == null || source.getPath() == null) return false;
        String TeXFile = source.getPath().toString();
        String[] cmds = {"tex", "-jobname=" +  getFullFilePath(null), "-interaction=scrollmode", TeXFile,"\\end"};
        boolean result = true;
        try {
            Process TeXProc = Runtime.getRuntime().exec(cmds);
            int exitVal = TeXProc.waitFor();
            if(exitVal != 0) result = false;
        }catch(Exception e){
            result = false;
        }

        if(pdf) if(!convertToPDF()) result = false;
        if(!log) if(!deleteLogFile()) result = false;
        if(!dvi) if(!deleteDVIFile()) result = false;

        return result;
    }
}
